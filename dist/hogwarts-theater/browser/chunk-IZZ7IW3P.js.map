{
  "version": 3,
  "sources": ["src/app/shared/services/cocktail.service.ts"],
  "sourcesContent": ["import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, signal } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { Cocktail } from '../models/cocktail.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class CocktailService {\r\n  cocktailURL = '/cocktails';\r\n  favorites = signal<string[]>([]);\r\n\r\n  constructor(private readonly httpClient: HttpClient) {\r\n    const favoritesFromStorage = localStorage.getItem('favorites');\r\n    const favoritesArray = favoritesFromStorage\r\n      ? JSON.parse(favoritesFromStorage)\r\n      : [];\r\n    this.favorites.set(favoritesArray);\r\n  }\r\n\r\n  getCocktails(): Observable<Cocktail[]> {\r\n    return this.httpClient.get<Cocktail[]>(this.cocktailURL).pipe();\r\n  }\r\n\r\n  getCocktailById(cocktailId: string): Observable<Cocktail | undefined> {\r\n    return this.getCocktails().pipe(\r\n      map((cocktails) => cocktails.find((item) => item.id === cocktailId))\r\n    );\r\n  }\r\n\r\n  isFavorite(id: string): boolean {\r\n    return this.favorites().includes(id);\r\n  }\r\n\r\n  toggleFavorite(id: string): void {\r\n    const currentFavorites = this.favorites();\r\n    if (currentFavorites.includes(id)) {\r\n      const updatedFavorites = currentFavorites.filter((item) => item !== id);\r\n      this.favorites.set(updatedFavorites);\r\n    } else {\r\n      const updatedFavorites = [...currentFavorites, id];\r\n      this.favorites.set(updatedFavorites);\r\n    }\r\n\r\n    localStorage.setItem('favorites', JSON.stringify(this.favorites()));\r\n  }\r\n}\r\n"],
  "mappings": "sEAQA,IAAaA,GAAe,IAAA,CAAtB,IAAOA,EAAP,MAAOA,CAAe,CAI1BC,YAA6BC,EAAsB,CAAtB,KAAAA,WAAAA,EAH7B,KAAAC,YAAc,aACd,KAAAC,UAAYC,EAAiB,CAAA,CAAE,EAG7B,IAAMC,EAAuBC,aAAaC,QAAQ,WAAW,EACvDC,EAAiBH,EACnBI,KAAKC,MAAML,CAAoB,EAC/B,CAAA,EACJ,KAAKF,UAAUQ,IAAIH,CAAc,CACnC,CAEAI,cAAY,CACV,OAAO,KAAKX,WAAWY,IAAgB,KAAKX,WAAW,EAAEY,KAAI,CAC/D,CAEAC,gBAAgBC,EAAkB,CAChC,OAAO,KAAKJ,aAAY,EAAGE,KACzBG,EAAKC,GAAcA,EAAUC,KAAMC,GAASA,EAAKC,KAAOL,CAAU,CAAC,CAAC,CAExE,CAEAM,WAAWD,EAAU,CACnB,OAAO,KAAKlB,UAAS,EAAGoB,SAASF,CAAE,CACrC,CAEAG,eAAeH,EAAU,CACvB,IAAMI,EAAmB,KAAKtB,UAAS,EACvC,GAAIsB,EAAiBF,SAASF,CAAE,EAAG,CACjC,IAAMK,EAAmBD,EAAiBE,OAAQP,GAASA,IAASC,CAAE,EACtE,KAAKlB,UAAUQ,IAAIe,CAAgB,MAC9B,CACL,IAAMA,EAAmB,CAAC,GAAGD,EAAkBJ,CAAE,EACjD,KAAKlB,UAAUQ,IAAIe,CAAgB,EAGrCpB,aAAasB,QAAQ,YAAanB,KAAKoB,UAAU,KAAK1B,UAAS,CAAE,CAAC,CACpE,yCArCWJ,GAAe+B,EAAAC,CAAA,CAAA,CAAA,wBAAfhC,EAAeiC,QAAfjC,EAAekC,UAAAC,WAFd,MAAM,CAAA,EAEd,IAAOnC,EAAPoC,SAAOpC,CAAe,GAAA",
  "names": ["CocktailService", "constructor", "httpClient", "cocktailURL", "favorites", "signal", "favoritesFromStorage", "localStorage", "getItem", "favoritesArray", "JSON", "parse", "set", "getCocktails", "get", "pipe", "getCocktailById", "cocktailId", "map", "cocktails", "find", "item", "id", "isFavorite", "includes", "toggleFavorite", "currentFavorites", "updatedFavorites", "filter", "setItem", "stringify", "\u0275\u0275inject", "HttpClient", "factory", "\u0275fac", "providedIn", "_CocktailService"]
}
